//CMy2DPoint.h
#pragma once
#include "pch.h"
#ifndef CMy2DPoint_H
#define CMy2DPoint_H
#include <iostream>
using namespace std;
class CMy2DPoint
{
	double x[2];
public:
	CMy2DPoint();
	CMy2DPoint(double, double);
	CMy2DPoint operator+(CMy2DPoint);
	friend CMy2DPoint operator+(CMy2DPoint, double);
	friend CMy2DPoint operator+(double, CMy2DPoint);
	friend CMy2DPoint operator-(CMy2DPoint, CMy2DPoint);
	friend CMy2DPoint operator-(CMy2DPoint, double);
	friend CMy2DPoint operator-(double, CMy2DPoint);
	friend CMy2DPoint operator*(CMy2DPoint, CMy2DPoint);
	friend CMy2DPoint operator*(double, CMy2DPoint);
	friend CMy2DPoint operator*(CMy2DPoint, double);
	friend CMy2DPoint operator/(CMy2DPoint, CMy2DPoint);
	friend CMy2DPoint operator/(CMy2DPoint, double);
	friend CMy2DPoint operator/(double, CMy2DPoint);
	friend int operator==(CMy2DPoint, CMy2DPoint);
	friend int operator==(CMy2DPoint, double);
	friend int operator==(double, CMy2DPoint);
	friend int operator!=(CMy2DPoint, CMy2DPoint);
	friend int operator!=(CMy2DPoint, double);
	friend int operator!=(double, CMy2DPoint);
	friend std::istream &operator>>(std::istream &stream, CMy2DPoint &op2);
	friend std::ostream &operator<<(std::ostream &stream, CMy2DPoint &op2);
	void set_x(double a) { x[0] = a; };
	void set_y(double b) { x[1] = b; };
	double get_x() { return x[0]; };
	double get_y() { return x[1]; };

	~CMy2DPoint();
};

#endif CMy2DPoint_H

//CMy2DObject.h

#pragma once
#include "CMy2DPoint.h"
#include "pch.h"
using namespace std;
const double radians = 3.14 / 180;
class CMy2DObject {
private:
	double a, a1, a2, a3;
	double m_dAngle;
	CMy2DPoint m_centre;
	double radian(double);
public:
	CMy2DObject();
	CMy2DObject(double, double, double, double, double, CMy2DPoint);
	void set(double, double, double, double);
	void get();
	void Move(double, double, double = 0);
	void Move(const CMy2DPoint, double = 0);
	void get_centre();
	void get_dAngle();
	double get_my_dAngle();
	void Rotate(double);
	bool IsInside(double, double);
	bool IsInside(CMy2DPoint);
};

//CMy2DPoint.cpp

#include "pch.h"
#include "CMy2DPoint.h"
CMy2DPoint::CMy2DPoint()
{
	x[0] = 0;
	x[1] = 0;
}
CMy2DPoint::CMy2DPoint(double param1, double param2)
{
	x[0] = param1;
	x[1] = param2;
}

CMy2DPoint::~CMy2DPoint()
{
	//std::cout << "Destroying the object" << std::endl;
}

CMy2DPoint CMy2DPoint::operator+(CMy2DPoint op2)
{
	CMy2DPoint temp;
	temp.x[0] = x[0] + op2.x[0];
	temp.x[1] = x[1] + op2.x[1];
	return temp;
}

CMy2DPoint operator-(CMy2DPoint op1, CMy2DPoint op2)
{
	CMy2DPoint temp;
	temp.x[0] = op1.x[0] - op2.x[0];
	temp.x[1] = op1.x[1] - op2.x[1];
	return temp;
}

CMy2DPoint operator+(CMy2DPoint op1, double param)
{
	CMy2DPoint temp;
	temp.x[0] = op1.x[0] + param;
	temp.x[1] = op1.x[1] + param;
	return temp;
}

CMy2DPoint operator+(double param, CMy2DPoint op1)
{
	CMy2DPoint temp;
	temp.x[0] = param + op1.x[0];
	temp.x[1] = param + op1.x[1];
	return temp;
}

CMy2DPoint operator-(CMy2DPoint op1, double param)
{
	CMy2DPoint temp;
	temp.x[0] = op1.x[0] - param;
	temp.x[1] = op1.x[1] - param;
	return temp;
}

CMy2DPoint operator-(double param, CMy2DPoint op1)
{
	CMy2DPoint temp;
	temp.x[0] = param - op1.x[0];
	temp.x[1] = param - op1.x[1];
	return temp;
}

CMy2DPoint operator*(CMy2DPoint op1, CMy2DPoint op2)
{
	CMy2DPoint temp;
	temp.x[0] = op1.x[0] * op2.x[0];
	temp.x[1] = op1.x[1] * op2.x[1];
	return temp;
}

CMy2DPoint operator*(CMy2DPoint op1, double param)
{
	CMy2DPoint temp;
	temp.x[0] = op1.x[0] * param;
	temp.x[1] = op1.x[1] * param;
	return temp;
}

CMy2DPoint operator*(double param, CMy2DPoint op1)
{
	CMy2DPoint temp;
	temp.x[0] = param * op1.x[0];
	temp.x[1] = param * op1.x[1];
	return temp;
}

CMy2DPoint operator/(CMy2DPoint op1, CMy2DPoint op2)
{
	CMy2DPoint temp;
	temp.x[0] = op1.x[0] / op2.x[0];
	temp.x[1] = op1.x[1] / op2.x[1];
	return temp;
}

CMy2DPoint operator/(CMy2DPoint op1, double param)
{
	CMy2DPoint temp;
	temp.x[0] = op1.x[0] / param;
	temp.x[1] = op1.x[1] / param;
	return temp;
}

CMy2DPoint operator/(double param, CMy2DPoint)
{
	CMy2DPoint temp;
	temp.x[0] = param / temp.x[0];
	temp.x[1] = param / temp.x[1];
	return temp;
}

int operator==(CMy2DPoint op1, CMy2DPoint op2)
{
	if (op1.x[0] == op2.x[0] && op1.x[1] == op2.x[1])
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int operator==(CMy2DPoint op1, double param)
{
	if (op1.x[0] == param && op1.x[1] == param)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int operator==(double param, CMy2DPoint op1)
{
	if (param == op1.x[0] && param == op1.x[1])
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int operator!=(CMy2DPoint op1, CMy2DPoint op2)
{
	if (op1.x[0] == op2.x[0] && op1.x[1] == op2.x[1])
	{
		return 0;
	}
	else
	{
		return 1;
	}
}

int operator!=(CMy2DPoint op1, double param)
{
	if (op1.x[0] == param && op1.x[1] == param)
	{
		return 0;
	}
	else
	{
		return 1;
	}
}

int operator!=(double param, CMy2DPoint op1)
{
	if (param == op1.x[0] && param == op1.x[1])
	{
		return 0;
	}
	else
	{
		return 1;
	}
}

std::istream &operator>>(std::istream &stream, CMy2DPoint &op2)
{
	std::cout << "Input coordinates x and y:" << std::endl;
	stream >> op2.x[0] >> op2.x[1];
	return stream;
}

std::ostream &operator<<(std::ostream &stream, CMy2DPoint &op2)
{
	stream << "(" << op2.x[0] << ", " << op2.x[1] << ")" << std::endl;
	return stream;
}

//CMy2dObject.cpp

#include "pch.h"
#include "CMy2DPoint.h"
#include "CMy2DObject.h"
using namespace std;

CMy2DObject::CMy2DObject()
{
	CMy2DPoint point(0, 0);
	a = 0;
	a1 = 0;
	a2 = 0;
	a3 = 0;
	m_dAngle = 0;
	m_centre = point;
}

CMy2DObject::CMy2DObject(double value, double value1, double value2, double value3, double angle, CMy2DPoint my_centre)
{
	a = value;
	a1 = value1;
	a2 = value2;
	a3 = value3;
	m_dAngle = radian(angle);
	m_centre = my_centre;
}

double CMy2DObject::radian(double my_angle)
{
	return my_angle * radians;
}

void CMy2DObject::set(double value, double value1, double value2, double value3) {
	const double hypotenuse = value * 1.118;
	while ((value2 + value3 > value && value1 + value2 > hypotenuse && value2 + value3 > hypotenuse) || (value < 0 || value1 < 0 || value2 < 0 || value3 < 0) || (value == 0))
	{
		cout << "figure is self-instructed or you was input negative numbers, try again: " << endl;
		cout << "Input a: \t";  cin >> value;
		cout << "Input a1: \t"; cin >> value1;
		cout << "Input a2: \t"; cin >> value2;
		cout << "Input a3: \t"; cin >> value3;
		if (value < 0) {
			cout << "You input negative A!" << endl;
			cout << "Try again. Input new A: \t";
			cin >> value;
			a = value;
		}
		if (value1 < 0) {
			cout << "You input negative radius A1!" << endl;
			cout << "Try again. Input new A1: \t";
			cin >> value1;
			a1 = value1;
		}
		if (value2 < 0) {
			cout << "You input negative radius A2!" << endl;
			cout << "Try again. Input new A2: \t";
			cin >> value2;
			a2 = value2;
		}
		if (value3 < 0) {
			cout << "You input negative radius A3!" << endl;
			cout << "Try again. Input new A3: \t";
			cin >> value3;
			a3 = value3;
		}
		if (value == 0) {
			cout << "You dont input A!" << endl;
			cout << "Try again. Input new A: \t";
			cin >> value;
			a = value;
		}
		if (value > 0 && value1 >= 0 && value2 >= 0 && value3 >= 0 && value2 + value3 < value && value1 + value2 < value * 1.118 && value2 + value3 < value * 1.118) {
			a = value;
			a1 = value1;
			a2 = value2;
			a3 = value3;
		}
	}
}

void CMy2DObject::get() {
	cout << "A side: \t" << a << endl;
	cout << "A1 - radius: \t" << a1 << endl;
	cout << "A2 - radius: \t" << a2 << endl;
	cout << "A3 - radius: \t" << a3 << endl;
	cout << "Figure was created" << endl;
}

void CMy2DObject::Rotate(double dAngle)
{
	m_dAngle += radian(dAngle);
}


void CMy2DObject::Move(double dx, double dy, double my_angle) {
	m_centre.set_x(dx + m_centre.get_x());
	m_centre.set_y(dy + m_centre.get_y());
	m_dAngle += radian(my_angle);
}


void CMy2DObject::Move(const CMy2DPoint delta, double my_angle)
{
	m_centre = m_centre + delta;
	m_dAngle += radian(my_angle);
}

void CMy2DObject::get_centre()
{
	cout << "(" << m_centre.get_x() << ", " << m_centre.get_y() << ")" << endl;
}

void CMy2DObject::get_dAngle()
{
	cout << "Angle in radians = \t" << m_dAngle << endl;
}

double CMy2DObject::get_my_dAngle()
{
	return m_dAngle;
}

/*bool CMy2DObject::IsInside(double x, double y) {
	double z1, z2, z3;
	static double a_ = a / 2;

	z1 = sqrt((x - (m_centre.get_x() + (a_)))*(x - (m_centre.get_x() + (a_))) + (y - m_centre.get_y())*(y - m_centre.get_y()));
	z2 = sqrt((x - (m_centre.get_x() - (a_)))*(x - (m_centre.get_x() - (a_))) + (y - (m_centre.get_y() + (a_))*(y - (m_centre.get_y() + (a_)))));
	z3 = sqrt((x - (m_centre.get_x() - (a_)))*(x - (m_centre.get_x() - (a_))) + (y - (m_centre.get_y() - (a_))*(y - (m_centre.get_y() - (a_)))));
	bool s = ((x < (m_centre.get_x() - (a_)) || (x < (m_centre.get_x() + (a_)) || (y < (m_centre.get_y() - (a_)) || (y < (m_centre.get_y() + (a_))) || (z1 <= a1) || (z2 <= a2) || (z3 <= a3)))));
	if (s != 1) return 1;
	else return 0;
	//return (s == 1) ? false : true;
}*/
bool CMy2DObject::IsInside(double x, double y)
{
	static double a_half = a / 2;
	double temp_x = m_centre.get_x() - m_centre.get_x() * (1 - cos(m_dAngle));
	double temp_y = m_centre.get_y() + m_centre.get_x() * sin(-m_dAngle);
	if ((x >= temp_x - a_half) &&
		(x <= temp_x + a_half) &&
		(y >= temp_y - a_half) &&
		(y <= temp_y + a_half) &&
		(((x - (temp_x + a_half))*(x - (temp_x + a_half)) +
		(y - temp_y)*(y - temp_y) - a1 * a1) >= 0) &&
			(((x - (temp_x - a_half))*(x - (temp_x - a_half)) +
		(y - (temp_y - a_half))*(y - (temp_y - a_half)) - a3 * a3) >= 0) &&
				((y - x - ((temp_y + a_half - a2) - temp_x + a_half)) <= 0)
		)
	{
		return true;
	}
	else
	{
		return false;
	}
}
bool CMy2DObject::IsInside(CMy2DPoint point) {
	static double a_half = a / 2;
	double temp_x = m_centre.get_x() - m_centre.get_x() * (1 - cos(m_dAngle));
	double temp_y = m_centre.get_y() + m_centre.get_x() * sin(-m_dAngle);
	if ((point.get_x() >= temp_x - a_half) &&
		(point.get_x() <= temp_x + a_half) &&
		(point.get_y() >= temp_y - a_half) &&
		(point.get_y() <= temp_y + a_half) &&
		(((point.get_x() - (temp_x + a_half))*(point.get_x() - (temp_x + a_half)) +
		(point.get_y() - temp_y)*(point.get_y() - temp_y) - a1 * a1) >= 0) &&
			(((point.get_x() - (temp_x - a_half))*(point.get_x() - (temp_x - a_half)) +
		(point.get_y() - (temp_y - a_half))*(point.get_y() - (temp_y - a_half)) - a3 * a3) >= 0) &&
				((point.get_y() - point.get_x() - ((temp_y + a_half - a2) - temp_x + a / 2)) <= 0)
		)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

//int main()

#include "pch.h"
#include <cmath>
#include <iostream>
#include "CMy2DPoint.h"
#include "CMy2DObject.h"
using namespace std;
int main()
{
	double a, a1, a2, a3, x_c, y_c, u;

	cout << "Input parametrs figure: " << endl;
	cout << "Side of figure - a: \t";
	cin >> a;
	cout << "Radius of figure - a1: \t";
	cin >> a1;
	cout << "Radius of figure - a2: \t";
	cin >> a2;
	cout << "Radius of figure - a3: \t";
	cin >> a3;
	cout << "Dot X centre - x_c: \t";
	cin >> x_c;
	cout << "Dot Y centre - y_c: \t";
	cin >> y_c;
	cout << "Input dangle: \t";
	cin >> u;
	cout << endl;

	CMy2DPoint dot(x_c, y_c);
	CMy2DObject b(a, a1, a2, a3, u, dot);
	b.set(a, a1, a2, a3);
	b.get();
	b.get_dAngle();
	b.Rotate(u);
	cout << "After rotate: \t" << endl;
	b.get_dAngle();
	cout << endl;

	double a_, b_;
	cout << "Move your figure: dx, dy" << endl;
	cout << "dx: \t"; cin >> a_;
	cout << "dy: \t"; cin >> b_;
	cout << endl;

	b.Move(a_, b_);
	cout << "Centre dot after moving: \t";
	b.get_centre();
	cout << endl;

	double amount, range1, range2;
	cout << "Input range for dot [a, b]: " << endl;
	cout << "Input a: \t"; cin >> range1;
	cout << "Input b: \t"; cin >> range2;
	cout << endl;
	cout << "Your diapozone is [" << range1 << ", " << range2 << "]" << endl;
	int range3 = (range2 - (range1 / 2));
	cout << "Input amount of dots: \t"; cin >> amount;
	for (int i = 0; i <= amount; i++)
	{
		double r1 = rand() % range3;
		double r2 = rand() % range3;
		CMy2DPoint p(r1, r2);
		if (b.IsInside(p))
		{
			cout << "Dot x, y: (" << r1 << ", " << r2 << ") is inside figure" << endl;
		}
		else
		{
			cout << "Dot x, y: (" << r1 << ", " << r2 << ") is not inside figure" << endl;
		}
	}
	system("pause");
	return 0;
}
